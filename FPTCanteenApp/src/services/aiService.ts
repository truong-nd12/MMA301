// AI Service for Nutrition Chatbot
import AsyncStorage from "@react-native-async-storage/async-storage";

export interface NutritionData {
  todayCalories: number;
  dailyGoal: number;
  protein: number;
  proteinGoal: number;
  carbs: number;
  carbsGoal: number;
  fat: number;
  fatGoal: number;
  recentMeals: string[];
}

export interface AIResponse {
  text: string;
  suggestions?: string[];
  type: "text" | "suggestion" | "nutrition_alert";
}

class AIService {
  private useLocalAI: boolean = true;
  private useGemini: boolean = false;
  private geminiApiKey: string = "AIzaSyDddn1w-W-wdPdXMhBg-UbF5wIiAG7qNWM"; // API key c·ªßa user

  constructor() {
    this.loadGeminiApiKey();
    // T·ª± ƒë·ªông enable Gemini n·∫øu c√≥ API key
    if (this.geminiApiKey) {
      this.enableGemini();
    }
  }

  // Gemini API Integration (Free)
  async callGemini(
    userMessage: string,
    nutritionData: NutritionData
  ): Promise<AIResponse> {
    try {
      // Ki·ªÉm tra API key
      if (!this.geminiApiKey) {
        console.log("Gemini API key not configured, using local AI");
        return this.callLocalAI(userMessage, nutritionData);
      }

      const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v√† h·ªØu √≠ch. B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi b·∫•t k·ª≥ c√¢u h·ªèi n√†o c·ªßa ng∆∞·ªùi d√πng.

${userMessage}

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, chi ti·∫øt v√† h·ªØu √≠ch. B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi v·ªÅ b·∫•t k·ª≥ ch·ªß ƒë·ªÅ n√†o: h·ªçc t·∫≠p, c√¥ng vi·ªác, gi·∫£i tr√≠, s·ª©c kh·ªèe, dinh d∆∞·ª°ng, ho·∫∑c b·∫•t c·ª© ƒëi·ªÅu g√¨ kh√°c.`;

      console.log("ü§ñ Calling Gemini API...");

      // Th·ª≠ c√°c model kh√°c nhau
      const models = [
        "gemini-1.5-flash",
        "gemini-1.5-pro",
        "gemini-pro",
        "gemini-1.0-pro",
      ];

      let response;
      let lastError;

      for (const model of models) {
        try {
          console.log(`üîÑ Trying model: ${model}`);

          response = await fetch(
            `https://generativelanguage.googleapis.com/v1/models/${model}:generateContent?key=${this.geminiApiKey}`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                contents: [
                  {
                    parts: [
                      {
                        text: prompt,
                      },
                    ],
                  },
                ],
                generationConfig: {
                  temperature: 0.7,
                  topK: 40,
                  topP: 0.95,
                  maxOutputTokens: 500,
                },
              }),
            }
          );

          if (response.ok) {
            console.log(`‚úÖ Model ${model} works!`);
            break;
          } else {
            const errorText = await response.text();
            console.log(
              `‚ùå Model ${model} failed: ${response.status} - ${errorText}`
            );
            lastError = new Error(
              `Gemini API error: ${response.status} - ${errorText}`
            );
          }
        } catch (error) {
          console.log(`‚ùå Model ${model} error:`, error);
          lastError = error;
        }
      }

      if (!response || !response.ok) {
        throw lastError || new Error("All Gemini models failed");
      }

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`Gemini API error: ${response.status} - ${errorText}`);
        throw new Error(`Gemini API error: ${response.status}`);
      }

      const data = await response.json();
      console.log("üì° Gemini response:", data);

      let aiText = "";

      // Parse Gemini response
      if (data.candidates && data.candidates[0] && data.candidates[0].content) {
        aiText = data.candidates[0].content.parts[0].text;
      }

      // Fallback n·∫øu response kh√¥ng t·ªët
      if (!aiText || aiText.length < 5) {
        console.log("Gemini response too short, using local AI");
        return this.callLocalAI(userMessage, nutritionData);
      }

      // Parse AI response for suggestions
      const suggestions = this.extractSuggestions(aiText);

      return {
        text: aiText,
        suggestions,
        type: suggestions.length > 0 ? "suggestion" : "text",
      };
    } catch (error) {
      console.error("Gemini API error:", error);
      // Fallback to local AI
      return this.callLocalAI(userMessage, nutritionData);
    }
  }

  // Local AI Fallback (Smart Rules)
  async callLocalAI(
    userMessage: string,
    nutritionData: NutritionData
  ): Promise<AIResponse> {
    const lowerMessage = userMessage.toLowerCase();

    // Enhanced local AI with more context and intelligence
    if (lowerMessage.includes("protein") || lowerMessage.includes("ƒë·∫°m")) {
      const proteinDeficit = nutritionData.proteinGoal - nutritionData.protein;
      const suggestions =
        proteinDeficit > 0
          ? ["G√† n∆∞·ªõng", "C√° h·ªìi", "Tr·ª©ng", "ƒê·∫≠u h≈©"]
          : ["Rau xanh", "Tr√°i c√¢y", "Ng≈© c·ªëc"];

      return {
        text: `ü•© Protein (ƒë·∫°m) r·∫•t quan tr·ªçng cho c∆° b·∫Øp v√† s·ª©c kh·ªèe!\n\nüìä T√¨nh tr·∫°ng c·ªßa b·∫°n:\n‚Ä¢ ƒê√£ ƒÉn: ${
          nutritionData.protein
        }g\n‚Ä¢ M·ª•c ti√™u: ${nutritionData.proteinGoal}g\n‚Ä¢ ${
          proteinDeficit > 0
            ? `C√≤n thi·∫øu: ${proteinDeficit}g`
            : "‚úÖ ƒê√£ ƒë·ªß protein!"
        }\n\nüí° L·ªùi khuy√™n:\n${
          proteinDeficit > 0
            ? `B·∫°n c·∫ßn th√™m ${proteinDeficit}g protein. Th·ª≠ m√≥n gi√†u ƒë·∫°m nh√©!`
            : "Tuy·ªát v·ªùi! B·∫°n ƒë√£ ƒë·ªß protein cho h√¥m nay."
        }\n\nüçΩÔ∏è G·ª£i √Ω: ${suggestions.join(", ")}`,
        suggestions,
        type: "nutrition_alert",
      };
    }

    if (lowerMessage.includes("calo") || lowerMessage.includes("calories")) {
      const calorieDeficit =
        nutritionData.dailyGoal - nutritionData.todayCalories;
      const suggestions =
        calorieDeficit > 0
          ? ["C∆°m g√† x·ªëi m·ª°", "Ph·ªü b√≤", "B√∫n ch·∫£"]
          : ["Salad rau", "S√∫p rau", "Tr√°i c√¢y"];

      return {
        text: `üî• Calo l√† nƒÉng l∆∞·ª£ng cho c∆° th·ªÉ!\n\nüìä H√¥m nay: ${
          nutritionData.todayCalories
        }/${nutritionData.dailyGoal} cal\n‚Ä¢ ${
          calorieDeficit > 0
            ? `C√≤n thi·∫øu: ${calorieDeficit} cal`
            : "‚úÖ ƒê√£ ƒë·ªß calo!"
        }\n\nüí° L·ªùi khuy√™n:\n${
          calorieDeficit > 0
            ? `B·∫°n c·∫ßn th√™m ${calorieDeficit} cal. Th·ª≠ m√≥n gi√†u nƒÉng l∆∞·ª£ng nh√©!`
            : "Tuy·ªát v·ªùi! B·∫°n ƒë√£ ƒë·ªß calo cho h√¥m nay."
        }\n\nüçΩÔ∏è G·ª£i √Ω: ${suggestions.join(", ")}`,
        suggestions,
        type: "nutrition_alert",
      };
    }

    if (lowerMessage.includes("g·ª£i √Ω") || lowerMessage.includes("ƒÉn g√¨")) {
      const calorieDeficit =
        nutritionData.dailyGoal - nutritionData.todayCalories;
      const proteinDeficit = nutritionData.proteinGoal - nutritionData.protein;

      let suggestions = [
        "C∆°m g√† x·ªëi m·ª°",
        "Ph·ªü b√≤",
        "B√∫n ch·∫£",
        "Sinh t·ªë tr√°i c√¢y",
      ];
      let recommendation = "";

      if (calorieDeficit > 200 && proteinDeficit > 10) {
        recommendation =
          "B·∫°n c·∫ßn c·∫£ calo v√† protein. G·ª£i √Ω m√≥n ch√≠nh gi√†u dinh d∆∞·ª°ng:";
        suggestions = [
          "C∆°m g√† x·ªëi m·ª°",
          "Ph·ªü b√≤ th√™m th·ªãt",
          "B√∫n ch·∫£",
          "C∆°m t·∫•m s∆∞·ªùn",
        ];
      } else if (proteinDeficit > 10) {
        recommendation = "B·∫°n c·∫ßn th√™m protein. G·ª£i √Ω m√≥n gi√†u ƒë·∫°m:";
        suggestions = ["G√† n∆∞·ªõng", "C√° h·ªìi", "Tr·ª©ng", "ƒê·∫≠u h≈©"];
      } else if (calorieDeficit > 200) {
        recommendation = "B·∫°n c·∫ßn th√™m calo. G·ª£i √Ω m√≥n gi√†u nƒÉng l∆∞·ª£ng:";
        suggestions = ["C∆°m g√† x·ªëi m·ª°", "Ph·ªü b√≤", "B√∫n ch·∫£", "B√°nh m√¨ th·ªãt"];
      } else {
        recommendation = "D·ª±a tr√™n dinh d∆∞·ª°ng c·ªßa b·∫°n, g·ª£i √Ω m√≥n c√¢n b·∫±ng:";
      }

      return {
        text: `üçΩÔ∏è ${recommendation}\n\nü•ó M√≥n ch√≠nh:\n‚Ä¢ C∆°m g√† x·ªëi m·ª° (650 cal, 25g protein)\n‚Ä¢ Ph·ªü b√≤ (450 cal, 18g protein)\n‚Ä¢ B√∫n ch·∫£ (550 cal, 20g protein)\n\nü•§ M√≥n ph·ª•:\n‚Ä¢ Sinh t·ªë tr√°i c√¢y (120 cal)\n‚Ä¢ N∆∞·ªõc √©p cam (80 cal)\n‚Ä¢ S·ªØa chua (100 cal)\n\nB·∫°n mu·ªën ƒë·∫∑t m√≥n n√†o?`,
        suggestions,
        type: "suggestion",
      };
    }

    if (lowerMessage.includes("gi·∫£m c√¢n") || lowerMessage.includes("diet")) {
      return {
        text: `üéØ K·∫ø ho·∫°ch gi·∫£m c√¢n th√¥ng minh:\n\nüìã Nguy√™n t·∫Øc:\n‚Ä¢ Calo n·∫°p < Calo ti√™u th·ª• (thi·∫øu 300-500 cal)\n‚Ä¢ TƒÉng protein (1.2-1.6g/kg c√¢n n·∫∑ng)\n‚Ä¢ Gi·∫£m carbs, tƒÉng ch·∫•t x∆°\n‚Ä¢ ƒÇn nhi·ªÅu rau xanh\n‚Ä¢ U·ªëng ƒë·ªß n∆∞·ªõc (2-3 l√≠t/ng√†y)\n\nüçΩÔ∏è M√≥n ƒÉn ph√π h·ª£p:\n‚Ä¢ Salad g√† (300 cal, 25g protein)\n‚Ä¢ C√° h·ªìi n∆∞·ªõng (400 cal, 22g protein)\n‚Ä¢ S√∫p rau (200 cal, 8g protein)\n‚Ä¢ Tr·ª©ng lu·ªôc (70 cal, 6g protein)\n\nüí™ K·∫øt h·ª£p:\n‚Ä¢ T·∫≠p cardio 30-45 ph√∫t/ng√†y\n‚Ä¢ T·∫≠p strength 2-3 l·∫ßn/tu·∫ßn\n‚Ä¢ Ng·ªß ƒë·ªß 7-8 ti·∫øng\n\nüìä M·ª•c ti√™u: Gi·∫£m 0.5-1kg/tu·∫ßn`,
        type: "text",
      };
    }

    if (lowerMessage.includes("tƒÉng c√¢n") || lowerMessage.includes("bulk")) {
      return {
        text: `üí™ K·∫ø ho·∫°ch tƒÉng c√¢n l√†nh m·∫°nh:\n\nüìã Nguy√™n t·∫Øc:\n‚Ä¢ Calo n·∫°p > Calo ti√™u th·ª• (th·ª´a 300-500 cal)\n‚Ä¢ TƒÉng protein (1.6-2.2g/kg c√¢n n·∫∑ng)\n‚Ä¢ TƒÉng carbs ph·ª©c h·ª£p\n‚Ä¢ ƒÇn 5-6 b·ªØa/ng√†y\n‚Ä¢ T·∫≠p luy·ªán tƒÉng c∆°\n\nüçΩÔ∏è M√≥n ƒÉn ph√π h·ª£p:\n‚Ä¢ C∆°m g√† x·ªëi m·ª° (650 cal, 25g protein)\n‚Ä¢ Ph·ªü b√≤ th√™m th·ªãt (600 cal, 25g protein)\n‚Ä¢ B√°nh m√¨ th·ªãt (450 cal, 20g protein)\n‚Ä¢ S·ªØa t∆∞∆°i (150 cal, 8g protein)\n\nüèãÔ∏è T·∫≠p luy·ªán:\n‚Ä¢ Strength training 3-4 l·∫ßn/tu·∫ßn\n‚Ä¢ Progressive overload\n‚Ä¢ Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß\n\nüìä M·ª•c ti√™u: TƒÉng 0.5-1kg/tu·∫ßn`,
        type: "text",
      };
    }

    if (lowerMessage.includes("vitamin") || lowerMessage.includes("vitamin")) {
      return {
        text: `ü•¨ Vitamin v√† kho√°ng ch·∫•t quan tr·ªçng:\n\nüçä Vitamin C:\n‚Ä¢ Ngu·ªìn: Cam, chanh, ·ªïi, ·ªõt chu√¥ng\n‚Ä¢ T√°c d·ª•ng: TƒÉng mi·ªÖn d·ªãch, ch·ªëng oxy h√≥a\n‚Ä¢ Li·ªÅu l∆∞·ª£ng: 75-90mg/ng√†y\n\nü•ï Vitamin A:\n‚Ä¢ Ngu·ªìn: C√† r·ªët, b√≠ ƒë·ªè, khoai lang\n‚Ä¢ T√°c d·ª•ng: T·ªët cho m·∫Øt, tƒÉng mi·ªÖn d·ªãch\n‚Ä¢ Li·ªÅu l∆∞·ª£ng: 700-900mcg/ng√†y\n\nü•¨ Vitamin K:\n‚Ä¢ Ngu·ªìn: Rau xanh, b√¥ng c·∫£i\n‚Ä¢ T√°c d·ª•ng: T·ªët cho x∆∞∆°ng, ƒë√¥ng m√°u\n‚Ä¢ Li·ªÅu l∆∞·ª£ng: 90-120mcg/ng√†y\n\nüíä L·ªùi khuy√™n:\n‚Ä¢ ƒÇn ƒëa d·∫°ng rau c·ªß qu·∫£\n‚Ä¢ ∆Øu ti√™n th·ª±c ph·∫©m t∆∞∆°i\n‚Ä¢ Kh√¥ng n√™n l·∫°m d·ª•ng supplement`,
        type: "text",
      };
    }

    if (lowerMessage.includes("carbs") || lowerMessage.includes("tinh b·ªôt")) {
      const carbsDeficit = nutritionData.carbsGoal - nutritionData.carbs;
      return {
        text: `üçö Carbs (tinh b·ªôt) l√† ngu·ªìn nƒÉng l∆∞·ª£ng ch√≠nh!\n\nüìä T√¨nh tr·∫°ng c·ªßa b·∫°n:\n‚Ä¢ ƒê√£ ƒÉn: ${
          nutritionData.carbs
        }g\n‚Ä¢ M·ª•c ti√™u: ${nutritionData.carbsGoal}g\n‚Ä¢ ${
          carbsDeficit > 0 ? `C√≤n thi·∫øu: ${carbsDeficit}g` : "‚úÖ ƒê√£ ƒë·ªß carbs!"
        }\n\nüí° L·ªùi khuy√™n:\n${
          carbsDeficit > 0
            ? `B·∫°n c·∫ßn th√™m ${carbsDeficit}g carbs. Th·ª≠ m√≥n gi√†u tinh b·ªôt nh√©!`
            : "Tuy·ªát v·ªùi! B·∫°n ƒë√£ ƒë·ªß carbs cho h√¥m nay."
        }\n\nüçΩÔ∏è G·ª£i √Ω: C∆°m, ph·ªü, b√∫n, b√°nh m√¨, khoai t√¢y`,
        suggestions: ["C∆°m g√† x·ªëi m·ª°", "Ph·ªü b√≤", "B√∫n ch·∫£", "B√°nh m√¨"],
        type: "nutrition_alert",
      };
    }

    if (lowerMessage.includes("fat") || lowerMessage.includes("ch·∫•t b√©o")) {
      const fatDeficit = nutritionData.fatGoal - nutritionData.fat;
      return {
        text: `ü•ë Fat (ch·∫•t b√©o) quan tr·ªçng cho hormone v√† vitamin!\n\nüìä T√¨nh tr·∫°ng c·ªßa b·∫°n:\n‚Ä¢ ƒê√£ ƒÉn: ${
          nutritionData.fat
        }g\n‚Ä¢ M·ª•c ti√™u: ${nutritionData.fatGoal}g\n‚Ä¢ ${
          fatDeficit > 0 ? `C√≤n thi·∫øu: ${fatDeficit}g` : "‚úÖ ƒê√£ ƒë·ªß fat!"
        }\n\nüí° L·ªùi khuy√™n:\n${
          fatDeficit > 0
            ? `B·∫°n c·∫ßn th√™m ${fatDeficit}g fat. Th·ª≠ m√≥n gi√†u ch·∫•t b√©o t·ªët nh√©!`
            : "Tuy·ªát v·ªùi! B·∫°n ƒë√£ ƒë·ªß fat cho h√¥m nay."
        }\n\nüçΩÔ∏è G·ª£i √Ω: C√° h·ªìi, b∆°, h·∫°t, d·∫ßu olive`,
        suggestions: ["C√° h·ªìi", "B∆°", "H·∫°t ƒëi·ªÅu", "D·∫ßu olive"],
        type: "nutrition_alert",
      };
    }

    // Default response with context
    return {
      text: `T√¥i hi·ªÉu b·∫°n ƒëang h·ªèi v·ªÅ "${userMessage}". D·ª±a tr√™n dinh d∆∞·ª°ng hi·ªán t·∫°i (${nutritionData.todayCalories}/${nutritionData.dailyGoal} cal), b·∫°n c√≥ th·ªÉ h·ªèi c·ª• th·ªÉ v·ªÅ:\n\n‚Ä¢ Protein, calo, carbs, fat\n‚Ä¢ G·ª£i √Ω m√≥n ƒÉn\n‚Ä¢ K·∫ø ho·∫°ch gi·∫£m/tƒÉng c√¢n\n‚Ä¢ Vitamin v√† kho√°ng ch·∫•t\n‚Ä¢ Ch·∫ø ƒë·ªô ƒÉn ƒë·∫∑c bi·ªát\n\nHo·∫∑c n√≥i "g·ª£i √Ω" ƒë·ªÉ t√¥i ƒë·ªÅ xu·∫•t m√≥n ƒÉn ph√π h·ª£p!`,
      type: "text",
    };
  }

  // Extract food suggestions from AI text
  private extractSuggestions(text: string): string[] {
    const foodItems = [
      "G√† n∆∞·ªõng",
      "C√° h·ªìi",
      "Tr·ª©ng",
      "ƒê·∫≠u h≈©",
      "C∆°m g√† x·ªëi m·ª°",
      "Ph·ªü b√≤",
      "B√∫n ch·∫£",
      "Sinh t·ªë tr√°i c√¢y",
      "N∆∞·ªõc √©p cam",
      "S·ªØa chua",
      "Salad rau",
      "S√∫p rau",
      "Tr√°i c√¢y",
    ];

    return foodItems
      .filter((item) => text.toLowerCase().includes(item.toLowerCase()))
      .slice(0, 4); // Max 4 suggestions
  }

  // Enable Gemini
  enableGemini() {
    this.useGemini = true;
    this.useLocalAI = false;
    console.log("Gemini AI enabled");
  }

  // Set Gemini API key
  async setGeminiApiKey(key: string) {
    this.geminiApiKey = key;
    await AsyncStorage.setItem("gemini_api_key", key);
    console.log("Gemini API key saved");
  }

  // Load Gemini API key
  private async loadGeminiApiKey() {
    try {
      const key = await AsyncStorage.getItem("gemini_api_key");
      if (key) {
        this.geminiApiKey = key;
        console.log("Gemini API key loaded");
      }
    } catch (error) {
      console.error("Error loading Gemini API key:", error);
    }
  }

  // Enable/disable local AI
  setUseLocalAI(useLocal: boolean) {
    this.useLocalAI = useLocal;
    this.useGemini = false;
  }

  // Check if Gemini is enabled
  isGeminiEnabled(): boolean {
    return this.useGemini;
  }

  // Main method to get AI response
  async getResponse(
    userMessage: string,
    nutritionData: NutritionData
  ): Promise<AIResponse> {
    if (this.useGemini) {
      return this.callGemini(userMessage, nutritionData);
    } else {
      return this.callLocalAI(userMessage, nutritionData);
    }
  }
}

export const aiService = new AIService();
