import React, { useState, useRef, useEffect } from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  TextInput,
  KeyboardAvoidingView,
  Platform,
  Alert,
} from "react-native";
import { LinearGradient } from "expo-linear-gradient";
import { Ionicons } from "@expo/vector-icons";
import { aiService, NutritionData, AIResponse } from "../services/aiService";

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  type?: "text" | "suggestion" | "nutrition_alert";
  suggestions?: string[];
  nutritionData?: any;
}

export default function AIChatScreen({ navigation, route }: any) {
  const getWelcomeMessage = () => {
    if (route.name === "GeminiAI") {
      return "Xin ch√†o! T√¥i l√† Google Gemini AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ Tr·∫£ l·ªùi b·∫•t k·ª≥ c√¢u h·ªèi n√†o\n‚Ä¢ T∆∞ v·∫•n dinh d∆∞·ª°ng v√† s·ª©c kh·ªèe\n‚Ä¢ H·ªó tr·ª£ h·ªçc t·∫≠p v√† c√¥ng vi·ªác\n‚Ä¢ Gi·∫£i tr√≠ v√† tr√≤ chuy·ªán\n‚Ä¢ V√† nhi·ªÅu ƒëi·ªÅu kh√°c!\n\nB·∫°n mu·ªën h·ªèi g√¨?";
    } else {
      return "Xin ch√†o! T√¥i l√† AICanteenFPT - Chatbot th√¥ng minh c·ªßa FPT. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ T∆∞ v·∫•n dinh d∆∞·ª°ng v√† s·ª©c kh·ªèe\n‚Ä¢ G·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p\n‚Ä¢ Ph√¢n t√≠ch ch·ªâ s·ªë dinh d∆∞·ª°ng\n‚Ä¢ L·∫≠p k·∫ø ho·∫°ch ƒÉn u·ªëng\n‚Ä¢ H·ªó tr·ª£ v·ªÅ cƒÉng tin FPT\n\nB·∫°n mu·ªën h·ªèi g√¨?";
    }
  };

  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: getWelcomeMessage(),
      isUser: false,
      timestamp: new Date(),
      type: "text",
    },
  ]);
  const [inputText, setInputText] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isAIConnected, setIsAIConnected] = useState(false);
  const scrollViewRef = useRef<ScrollView>(null);

  // Get AI type info for display based on route
  const getAiTypeInfo = () => {
    if (route.name === "GeminiAI") {
      return {
        type: "ü§ñ Google Gemini",
        color: "#4285f4",
        description: "AI mi·ªÖn ph√≠",
      };
    } else {
      return {
        type: "üè† AICanteenFPT",
        color: "#FF6F00",
        description: "AI Offline",
      };
    }
  };

  const aiInfo = getAiTypeInfo();

  // D·ªØ li·ªáu dinh d∆∞·ª°ng m·∫´u c·ªßa user
  const userNutritionData: NutritionData = {
    todayCalories: 1450,
    dailyGoal: 2000,
    protein: 45,
    proteinGoal: 60,
    carbs: 180,
    carbsGoal: 250,
    fat: 52,
    fatGoal: 65,
    recentMeals: ["C∆°m g√† x·ªëi m·ª°", "Ph·ªü b√≤", "Sinh t·ªë tr√°i c√¢y"],
  };

  // Initialize AI Service based on route
  useEffect(() => {
    initializeAI();
  }, [route.name]);

  const initializeAI = async () => {
    try {
      if (route.name === "GeminiAI") {
        // Use Gemini AI
        aiService.enableGemini();
        setIsAIConnected(true);
        console.log("ü§ñ Using Google Gemini AI - Free and powerful!");
      } else {
        // Use Local AI (AICanteenFPT)
        aiService.setUseLocalAI(true);
        setIsAIConnected(false);
        console.log("üè† Using AICanteenFPT - Smart local chatbot!");
      }
    } catch (error) {
      console.log("‚ùå AI initialization error:", error);
      setIsAIConnected(false);
    }
  };

  const sendMessage = async () => {
    if (inputText.trim() === "") return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      isUser: true,
      timestamp: new Date(),
      type: "text",
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputText("");
    setIsTyping(true);

    try {
      // G·ªçi AI service th·∫≠t
      const aiResponse: AIResponse = await aiService.getResponse(
        inputText,
        userNutritionData
      );

      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: aiResponse.text,
        isUser: false,
        timestamp: new Date(),
        type: aiResponse.type,
        suggestions: aiResponse.suggestions,
      };

      setMessages((prev) => [...prev, aiMessage]);
    } catch (error: any) {
      console.error("AI Service error:", error);

      let errorMessage = "Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau.";

      // X·ª≠ l√Ω l·ªói c·ª• th·ªÉ
      if (error.message && error.message.includes("429")) {
        errorMessage = `ü§ñ AI ƒëang b·∫≠n!\n\n‚ùå L·ªói: H·∫øt quota OpenAI API\n\nüí° C√°ch kh·∫Øc ph·ª•c:\n1. V√†o https://platform.openai.com/account/billing\n2. N·∫°p th√™m credit (t·ªëi thi·ªÉu $5)\n3. Ho·∫∑c d√πng AI Local (mi·ªÖn ph√≠)\n\nüîÑ ƒêang chuy·ªÉn sang AI Local...`;

        // T·ª± ƒë·ªông chuy·ªÉn sang local AI
        aiService.setUseLocalAI(true);
        setIsAIConnected(false);

        // Th·ª≠ l·∫°i v·ªõi local AI
        setTimeout(async () => {
          try {
            const localResponse = await aiService.getResponse(
              inputText,
              userNutritionData
            );
            const localMessage: Message = {
              id: (Date.now() + 2).toString(),
              text: localResponse.text,
              isUser: false,
              timestamp: new Date(),
              type: localResponse.type,
              suggestions: localResponse.suggestions,
            };
            setMessages((prev) => [...prev, localMessage]);
          } catch (localError) {
            console.error("Local AI error:", localError);
          }
        }, 1000);
      } else if (error.message && error.message.includes("401")) {
        errorMessage =
          "‚ùå API Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i trong Settings > C√†i ƒë·∫∑t AI.";
      } else if (error.message && error.message.includes("network")) {
        errorMessage =
          "üåê L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.";
      }

      const errorMessageObj: Message = {
        id: (Date.now() + 1).toString(),
        text: errorMessage,
        isUser: false,
        timestamp: new Date(),
        type: "text",
      };

      setMessages((prev) => [...prev, errorMessageObj]);
    } finally {
      setIsTyping(false);
    }
  };

  const handleSuggestionPress = (suggestion: string) => {
    setInputText(suggestion);
  };

  const renderMessage = (message: Message) => {
    return (
      <View
        key={message.id}
        style={[
          styles.messageContainer,
          message.isUser ? styles.userMessage : styles.aiMessage,
        ]}
      >
        <View
          style={[
            styles.messageBubble,
            message.isUser ? styles.userBubble : styles.aiBubble,
          ]}
        >
          <Text
            style={[
              styles.messageText,
              message.isUser ? styles.userText : styles.aiText,
            ]}
          >
            {message.text}
          </Text>

          {message.suggestions && message.suggestions.length > 0 && (
            <View style={styles.suggestionsContainer}>
              {message.suggestions.map((suggestion, index) => (
                <TouchableOpacity
                  key={index}
                  style={styles.suggestionButton}
                  onPress={() => handleSuggestionPress(suggestion)}
                >
                  <Text style={styles.suggestionText}>{suggestion}</Text>
                </TouchableOpacity>
              ))}
            </View>
          )}

          <Text style={styles.timestamp}>
            {message.timestamp.toLocaleTimeString("vi-VN", {
              hour: "2-digit",
              minute: "2-digit",
            })}
          </Text>
        </View>
      </View>
    );
  };

  useEffect(() => {
    scrollViewRef.current?.scrollToEnd({ animated: true });
  }, [messages]);

  return (
    <View style={styles.container}>
      <LinearGradient colors={["#667eea", "#764ba2"]} style={styles.header}>
        <View style={styles.headerContent}>
          <View style={styles.aiAvatar}>
            <Ionicons name="chatbubbles" size={24} color="#fff" />
          </View>
          <View style={styles.headerText}>
            <Text style={styles.headerTitle}>
              {route.name === "GeminiAI" ? "Gemini AI" : "AICanteenFPT"}
            </Text>
            <View style={styles.headerStatus}>
              <Text style={styles.headerSubtitle}>
                {isTyping ? "ƒêang nh·∫≠p..." : "Tr·ª±c tuy·∫øn"}
              </Text>
              <View
                style={[styles.statusDot, { backgroundColor: aiInfo.color }]}
              />
              <Text style={styles.statusText}>{aiInfo.type}</Text>
              <View
                style={[styles.aiTypeBadge, { backgroundColor: aiInfo.color }]}
              >
                <Text style={styles.aiTypeBadgeText}>{aiInfo.description}</Text>
              </View>
            </View>
          </View>
        </View>
      </LinearGradient>

      <KeyboardAvoidingView
        style={styles.chatContainer}
        behavior={Platform.OS === "ios" ? "padding" : "height"}
      >
        <ScrollView
          ref={scrollViewRef}
          style={styles.messagesContainer}
          showsVerticalScrollIndicator={false}
        >
          {messages.map(renderMessage)}
          {isTyping && (
            <View style={styles.typingIndicator}>
              <Text style={styles.typingText}>AI ƒëang nh·∫≠p...</Text>
            </View>
          )}
        </ScrollView>

        <View style={styles.inputContainer}>
          <TextInput
            style={styles.textInput}
            value={inputText}
            onChangeText={setInputText}
            placeholder={
              route.name === "GeminiAI"
                ? "Nh·∫≠p c√¢u h·ªèi b·∫•t k·ª≥..."
                : "Nh·∫≠p c√¢u h·ªèi v·ªÅ dinh d∆∞·ª°ng..."
            }
            placeholderTextColor="#999"
            multiline
            maxLength={500}
          />
          <TouchableOpacity
            style={[
              styles.sendButton,
              inputText.trim()
                ? styles.sendButtonActive
                : styles.sendButtonInactive,
            ]}
            onPress={sendMessage}
            disabled={!inputText.trim()}
          >
            <Ionicons
              name="send"
              size={20}
              color={inputText.trim() ? "#fff" : "#ccc"}
            />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#f8f9fa" },
  header: {
    paddingTop: 60,
    paddingBottom: 20,
    borderBottomLeftRadius: 30,
    borderBottomRightRadius: 30,
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 20,
  },

  headerContent: {
    flexDirection: "row",
    alignItems: "center",
    flex: 1,
    justifyContent: "center",
  },
  aiAvatar: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: "rgba(255,255,255,0.2)",
    alignItems: "center",
    justifyContent: "center",
    marginRight: 12,
  },
  headerText: {
    flex: 1,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#fff",
    marginBottom: 2,
  },
  headerStatus: {
    flexDirection: "row",
    alignItems: "center",
  },
  headerSubtitle: {
    fontSize: 12,
    color: "rgba(255,255,255,0.8)",
    marginRight: 8,
  },
  statusDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    marginRight: 4,
  },
  statusText: {
    fontSize: 10,
    color: "rgba(255,255,255,0.8)",
  },
  aiTypeBadge: {
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 8,
    marginLeft: 4,
  },
  aiTypeBadgeText: {
    fontSize: 8,
    color: "#fff",
    fontWeight: "500",
  },
  chatContainer: {
    flex: 1,
  },
  messagesContainer: {
    flex: 1,
    padding: 16,
  },
  messageContainer: {
    marginBottom: 16,
  },
  userMessage: {
    alignItems: "flex-end",
  },
  aiMessage: {
    alignItems: "flex-start",
  },
  messageBubble: {
    maxWidth: "80%",
    padding: 16,
    borderRadius: 20,
  },
  userBubble: {
    backgroundColor: "#667eea",
    borderBottomRightRadius: 4,
  },
  aiBubble: {
    backgroundColor: "#fff",
    borderBottomLeftRadius: 4,
    shadowColor: "#000",
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 2,
  },
  messageText: {
    fontSize: 16,
    lineHeight: 22,
  },
  userText: {
    color: "#fff",
  },
  aiText: {
    color: "#333",
  },
  suggestionsContainer: {
    marginTop: 12,
    flexDirection: "row",
    flexWrap: "wrap",
    gap: 8,
  },
  suggestionButton: {
    backgroundColor: "#667eea22",
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    borderWidth: 1,
    borderColor: "#667eea44",
  },
  suggestionText: {
    color: "#667eea",
    fontSize: 14,
    fontWeight: "500",
  },
  timestamp: {
    fontSize: 11,
    color: "#999",
    marginTop: 8,
    textAlign: "right",
  },
  typingIndicator: {
    alignItems: "flex-start",
    marginBottom: 16,
  },
  typingText: {
    fontSize: 14,
    color: "#666",
    fontStyle: "italic",
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "flex-end",
    padding: 16,
    backgroundColor: "#fff",
    borderTopWidth: 1,
    borderTopColor: "#f0f0f0",
  },
  textInput: {
    flex: 1,
    backgroundColor: "#f8f9fa",
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginRight: 12,
    fontSize: 16,
    maxHeight: 100,
  },
  sendButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    alignItems: "center",
    justifyContent: "center",
  },
  sendButtonActive: {
    backgroundColor: "#667eea",
  },
  sendButtonInactive: {
    backgroundColor: "#f0f0f0",
  },
});
